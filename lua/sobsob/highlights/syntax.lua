return function(cp)
	return {
		-- Text
		Comment                                          = { fg = cp.white_dark, italic = true },
		PreCondit                                        = { fg = cp.orange },
		SpecialChar                                      = { fg = cp.magenta },
		-- Function
		Function                                         = { fg = cp.purple, bold = true },
		Label                                            = { fg = cp.purple, bold = true },
		-- Keyword
		Keyword                                          = { fg = cp.cyan },
		Statment                                         = { fg = cp.cyan },
		Conditional                                      = { fg = cp.cyan },
		Repeat                                           = { fg = cp.cyan },
		Exception                                        = { fg = cp.cyan },
		-- Identifier
		Identifier                                       = { fg = cp.purple },
		-- Statement
		Statement                                        = { fg = cp.cyan },
		Macro                                            = { fg = cp.magenta },
		Define                                           = { fg = cp.cyan },
		Include                                          = { fg = cp.cyan },
		PreProc                                          = { fg = cp.purple },
		-- TODO: segregate that a little: below
		rustSelf                                         = { fg = cp.purple, bold = true },
		rustModPath                                      = { fg = cp.yellow },
		rustAttribute                                    = { fg = cp.violet },
		rustAttributeParenthesizedParens                 = { fg = cp.purple },
		rustIdentifier                                   = { fg = cp.yellow },
		["@lsp.typemod.generic.attribute.rust"]          = { fg = cp.pink },
		["@lsp.typemod.operator.macro.rust"]             = { fg = cp.violet },
		["@lsp.typemod.derive.attribute.rust"]           = { fg = cp.pink },
		["@lsp.typemod.attributeBracket.attribute.rust"] = { fg = cp.violet },
		["@lsp.typemod.selfKeyword.declaration.rust"]    = { fg = cp.purple, bold = true },
		["@lsp.typemod.builtinAttribute.attribute.rust"] = { fg = cp.purple },
		["@lsp.type.attributeBracket.rust"]              = { fg = cp.violet },
		["@lsp.type.builtinAttribute.rust"]              = { fg = cp.yellow, bold = true },
		["@lsp.typemod.lifetime.declaration.rust"]       = { fg = cp.pink },
		["@lsp.type.lifetime.rust"]                      = { fg = cp.pink },
		["@lsp.typemod.namespace.attribute.rust"]        = { fg = cp.purple },
		["@lsp.typemod.namespace.macro.rust"]            = { fg = cp.cyan },
		["@lsp.typemod.namespace.procMacro.rust"]        = { fg = cp.cyan },
		["@lsp.type.const.rust"]                         = { fg = cp.magenta, bold = true },
		hsPragma                                         = { fg = cp.cyan },
		hsImportModuleName                               = { fg = cp.green },
		hsImportGroup                                    = { fg = cp.green },
		-- Type
		Type                                             = { fg = cp.yellow },
		Constant                                         = { fg = cp.violet, bold = true },
		Structure                                        = { fg = cp.yellow, bold = true },
		-- Literal
		Number                                           = { fg = cp.red },
		Boolean                                          = { fg = cp.red },
		Float                                            = { fg = cp.red },
		Character                                        = { fg = cp.red },
		String                                           = { fg = cp.green },
		-- Operator
		Operator                                         = { fg = cp.magenta, bold = true },
		-- Delimiter
		Delimiter                                        = { fg = cp.violet },
		hsDelimiter                                      = { fg = cp.violet },
		-- Html tags
		htmlTag                                          = { fg = cp.violet, bold = true },
		htmlEndTag                                       = { fg = cp.violet, bold = true },
		htmlTagN                                         = { fg = cp.yellow, bold = true },
		htmlSpecialTagName                               = { fg = cp.magenta, bold = true },
		htmlTagName                                      = { fg = cp.yellow, bold = true },
		-- Html args
		-- Title                                            = { link = "Normal" },
		-- htmlTitle                                        = { link = "Normal" },
		htmlArg                                          = { fg = cp.purple },
		htmlArgN                                         = { fg = cp.red },
		htmlValue                                        = { fg = cp.red },
		htmlString                                       = { link = "String" },
		htmlStringDQ                                     = { link = "htmlString" },
		htmlStringSQ                                     = { link = "htmlString" },
		htmlLink                                         = { fg = cp.cyan, underline = true },
		cssTagName                                       = { fg = cp.yellow },
		cssIdentifier                                    = { fg = cp.pink },
		cssClassNameDot                                  = { fg = cp.pink },
		cssClassName                                     = { fg = cp.pink },
		cssPseudoClassId                                 = { fg = cp.violet },
		cssNoise                                         = { fg = cp.violet },
		cssBraces                                        = { fg = cp.violet },
		cssFunctionComma                                 = { fg = cp.violet },
		cssFunctionName                                  = { fg = cp.violet },
		cssDefinition                                    = { fg = cp.purple },
		cssStyle                                         = { fg = cp.purple },
		cssUnitDecorators                                = { fg = cp.violet },
		cssMediaType                                     = { fg = cp.yellow },
		cssColor                                         = { fg = cp.red },
		cssHacks                                         = { fg = cp.pink },
		cssSelectorOp                                    = { fg = cp.violet },
		cssCustomProp                                    = { fg = cp.purple },
		cssImportant                                     = { fg = cp.magenta, bold = true },
		-- Prop
		cssTextProp                                      = { fg = cp.purple },
		cssMediaProp                                     = { fg = cp.purple },
		cssMultiColumnProp                               = { fg = cp.purple },
		cssPageProp                                      = { fg = cp.purple },
		cssObjectProp                                    = { fg = cp.purple },
		cssBackgroundProp                                = { fg = cp.purple },
		cssColorProp                                     = { fg = cp.purple },
		cssTransformProp                                 = { fg = cp.purple },
		cssTransitionProp                                = { fg = cp.purple },
		cssPositioningProp                               = { fg = cp.purple },
		cssFlexibleBoxProp                               = { fg = cp.purple },
		cssBoxProp                                       = { fg = cp.purple },
		cssUIProp                                        = { fg = cp.purple },
		cssAnimationProp                                 = { fg = cp.purple },
		cssGridProp                                      = { fg = cp.purple },
		cssBorderProp                                    = { fg = cp.purple },
		cssFontProp                                      = { fg = cp.purple },
		-- Attr
		-- cssFlexibleBoxAttr                               = { fg = cp.red },
		-- cssObjectAttr                                    = { fg = cp.red },
		-- cssBackgroundAttr                                = { fg = cp.red },
		-- cssTransitionAttr                                = { fg = cp.red },
		-- cssMediaAttr                                     = { fg = cp.red },
		-- cssAnimationAttr                                 = { fg = cp.red },
		-- cssPositioningAttr                               = { fg = cp.red },
		-- rest
		javaScript                                       = { fg = cp.purple },
		javaScriptParens                                 = { fg = cp.violet },
		cParen                                           = { fg = cp.violet },
		cBlock                                           = { fg = cp.violet },
		cBracket                                         = { fg = cp.violet },
		cSpecialCharacter                                = { fg = cp.red },
		javaScriptBraces                                 = { fg = cp.violet },
		rustFoldBraces                                   = { fg = cp.violet },
		rustLifetime                                     = { fg = cp.pink },
		VarId                                            = { fg = cp.purple },
		ConId                                            = { fg = cp.pink },
		rustSigil                                        = { fg = cp.magenta },
		pythonEscape                                     = { fg = cp.red },
		["@variable.builtin.python"]                     = { fg = cp.violet },
		pythonAttribute                                  = { fg = cp.purple },
		hyprCategory                                     = { fg = cp.magenta, bold = true },
		hyprCategory0                                    = { fg = cp.magenta, bold = true },
		hyprCategoryD                                    = { fg = cp.magenta, bold = true },
		hyprCommand                                      = { fg = cp.cyan },
		hyprVariable                                     = { fg = cp.purple },
		hyprNumber                                       = { fg = cp.red },
		hyprColor                                        = { fg = cp.red },
		hyprValue                                        = { fg = cp.violet },
		goPredefinedIdentifiers                          = { fg = cp.yellow, bold = true },
		-- ["@lsp.type.namespace.go"]                       = { fg = cp.yellow},
		goBlock                                          = { fg = cp.yellow },
		--------------------
		-- fallback (END) --
		--------------------
		----------------
		-- Treesitter --
		----------------
		-- Text
		["@text"]                                        = { fg = cp.purple },
		["@text.strong"]                                 = { fg = cp.purple, bold = true },
		["@text.emphasis"]                               = { fg = cp.purple, italic = true },
		["@text.underline"]                              = { fg = cp.purple, underline = true },
		["@text.strike"]                                 = { fg = cp.purple, strikethrough = true },
		["@text.title"]                                  = { fg = cp.green, bg = cp.red, bold = true },
		["@text.literal"]                                = { fg = cp.green },
		["@text.uri"]                                    = { fg = cp.cyan, underline = true },
		["@text.math"]                                   = { fg = cp.yellow },
		["@text.reference"]                              = { fg = cp.cyan },
		["@text.environment"]                            = { fg = cp.yellow },
		["@text.environment.name"]                       = { fg = cp.yellow, bold = true },
		["@text.note"]                                   = { fg = cp.white_dimm },
		["@text.warning"]                                = { fg = cp.warning },
		["@text.danger"]                                 = { fg = cp.error },
		["@text.diff.add"]                               = { fg = cp.ok },
		["@text.diff.delete"]                            = { fg = cp.error },
		["@comment"]                                     = { fg = cp.white_dark, italic = true },
		["@comment.documentation"]                       = { fg = cp.white_dark, bold = true, italic = true },
		["@special.comment"]                             = { fg = cp.white_dark, bold = true },
		["@comment.error"]                               = { fg = cp.error },
		["@preproc"]                                     = { fg = cp.orange },
		-- Keyword
		["@keyword"]                                     = { fg = cp.cyan },
		["@keyword.function"]                            = { fg = cp.cyan, bold = true },
		["@keyword.operator"]                            = { fg = cp.cyan },
		["@keyword.return"]                              = { fg = cp.cyan },
		["@conditional"]                                 = { fg = cp.cyan },
		["@repeat"]                                      = { fg = cp.cyan },
		-- Html
		["@tag"]                                         = { fg = cp.yellow },
		["@tag.delimiter"]                               = { fg = cp.violet },
		["@tag.html"]                                    = { fg = cp.yellow },
		["@tag.name"]                                    = { fg = cp.yellow },
		["@tag.builtin"]                                 = { fg = cp.yellow },
		["@tag.css"]                                     = { fg = cp.yellow },
		["@constant.css"]                                = { fg = cp.yellow },
		-- XML
		["@tag.attribute.xml"]                           = { fg = cp.violet },
		["@tag.xml"]                                     = { fg = cp.yellow },
		["@punctuation.delimiter.xml"]                   = { fg = cp.green },
		-- Statement
		["@debug"]                                       = { fg = cp.orange },
		["@statment"]                                    = { fg = cp.cyan },
		["@include"]                                     = { fg = cp.cyan },
		["@define"]                                      = { fg = cp.cyan },
		["@macro"]                                       = { fg = cp.magenta },
		-- Identifier
		["@identifier"]                                  = { fg = cp.purple },
		["@property"]                                    = { fg = cp.purple },
		["@property.css"]                                = { fg = cp.purple },
		["@variable"]                                    = { fg = cp.purple },
		["@variable.builtin"]                            = { fg = cp.purple, bold = true },
		["@variable.property"]                           = { fg = cp.purple },
		["@variable.parameter"]                          = { fg = cp.purple },
		["@variable.function"]                           = { fg = cp.purple, bg = cp.red, bold = true },
		["@variable.member.query"]                       = { fg = cp.red, bold = true },
		-- Function
		["@function"]                                    = { fg = cp.purple, bold = true },
		["@function.call"]                               = { fg = cp.purple, bold = true },
		["@function.builtin"]                            = { fg = cp.purple, bold = true },
		["@function.macro"]                              = { fg = cp.purple, bold = true },
		["@lsp.type.function"]                           = { fg = cp.purple, bold = true },
		["@lsp.type.method"]                             = { fg = cp.purple, bold = true },
		["@parameter"]                                   = { fg = cp.cyan },
		["@method.call"]                                 = { fg = cp.purple, bold = true },
		["@method"]                                      = { fg = cp.purple, bold = true },
		["@constructor"]                                 = { fg = cp.magenta, bold = true },
		["@constructor.lua"]                             = { fg = cp.violet },
		["@label"]                                       = { fg = cp.cyan, bold = true },
		-- Type
		["@type"]                                        = { fg = cp.yellow },
		["@type.builtin"]                                = { fg = cp.yellow, bold = true },
		["@type.qualifier"]                              = { fg = cp.yellow },
		["@type.definition"]                             = { fg = cp.yellow, bold = true },
		["@storageclass"]                                = { fg = cp.yellow },
		["@namespace"]                                   = { fg = cp.yellow },
		["@constant"]                                    = { fg = cp.magenta, bold = true },
		["@constant.builtin"]                            = { fg = cp.magenta, bold = true },
		["@constant.macro"]                              = { fg = cp.magenta, bold = true },
		-- Lsp Type
		["@lsp.type.structure"]                          = { fg = cp.yellow, bold = true },

		-- Literal
		["@null"]                                        = { fg = cp.yellow },
		["@string"]                                      = { fg = cp.green },
		["@string.regex"]                                = { fg = cp.magenta },
		["@string.escape"]                               = { fg = cp.magenta },
		["@string.special"]                              = { fg = cp.magenta },
		["@string.special.url"]                          = { fg = cp.cyan, underline = true },
		["@character"]                                   = { fg = cp.red },
		["@character.special"]                           = { fg = cp.red, bold = true },
		["@number"]                                      = { fg = cp.red },
		["@boolean"]                                     = { fg = cp.red },
		["@float"]                                       = { fg = cp.red },
		-- Punctuation
		["@attribute"]                                   = { fg = cp.purple, bold = true },
		["@attribute.value"]                             = { fg = cp.red },
		["@tag.attribute.javascript"]                    = { fg = cp.purple },
		["@punctuation.bracket"]                         = { fg = cp.violet },
		["@punctuation.delimiter"]                       = { fg = cp.violet },
		["@punctuation.special"]                         = { fg = cp.violet },
		-- Operator
		["@operator"]                                    = { fg = cp.magenta, bold = true },
		-- css
		["@attribute.css"]                               = { fg = cp.violet },
		----------------------
		-- Treesitter (END) --
		----------------------
		----------------------
		---- syntax (END) ----
		----------------------
	}
end
